<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python基本数据结构总结1</title>
      <link href="/2024/09/25/python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
      <url>/2024/09/25/python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Python 是一种解释型、动态语言，它具有以下特点：</p><ol><li>简单易用：Python 的语法简单，容易上手，学习成本低，适合初学者。</li><li>强大的库和框架：Python 提供了丰富的库和框架，可以快速实现各种功能。例如，Python 提供了 NumPy、Pandas 等库，可以轻松实现数值计算和数据分析。</li><li>社区活跃：Python 社区非常活跃，拥有丰富的资源，可以快速找到需要的帮助。</li></ol><p>python的数据结构也是十分灵活的，比如列表，像C++里面的数组，但又不完全是，比起数组，它的能力更强，不仅是动态的（比如C++的<code>vector&lt;int&gt;</code>），也能混合存储不同的数据类型，得益于灵活的数据结构，使用python处理数据往往更加简单。由于博主在写python相关的程序时，忘记了以前学过的字符串，列表，字典等等的一些处理的函数，故进行总结.</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="基本运用"><a href="#基本运用" class="headerlink" title="基本运用"></a>基本运用</h2><ul><li>创建列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment"># 通过将一系列元素放在方括号 [] 中，并用逗号分隔来创建一个列表。</span></span><br><span class="line">list1 = [] <span class="comment">#也可以在[]什么都不写</span></span><br></pre></td></tr></table></figure><ul><li>访问列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = my_list[<span class="number">0</span>]  <span class="comment"># 返回 1</span></span><br></pre></td></tr></table></figure><ul><li><p>修改元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_list[<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># [10, 2, 3, 4, 5] 将第一个元素修改为 10</span></span><br></pre></td></tr></table></figure></li><li><p>添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list.append(<span class="number">6</span>)  <span class="comment"># [10, 2, 3, 4, 5, 6]尾插法</span></span><br><span class="line">my_list.insert(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)  <span class="comment"># [10, &#x27;a&#x27;, 2, 3, 4, 5, 6]指定一个位置插入元素</span></span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> my_list[<span class="number">0</span>]  <span class="comment"># 删除第一个元素</span></span><br><span class="line">my_list.remove(<span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 删除列表中第一个值为 &#x27;a&#x27; 的元素</span></span><br><span class="line">last_element = my_list.pop() <span class="comment"># 删除并返回列表最后一个元素</span></span><br><span class="line">popped_element = my_list.pop(<span class="number">1</span>) <span class="comment"># 删除并返回列表中索引为 1 的元素</span></span><br><span class="line">my_list.clear() <span class="comment"># 清空列表</span></span><br></pre></td></tr></table></figure></li><li><p>列表切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list[start:stop:step]</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">sliced_list = my_list[<span class="number">1</span>:<span class="number">4</span>]  <span class="comment"># [2, 3, 4] 切片是左闭右开区间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负索引切片</span></span><br><span class="line">my_list = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[-<span class="number">3</span>:])  <span class="comment"># 输出 [&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向切片</span></span><br><span class="line">my_list = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[:-<span class="number">3</span>:-<span class="number">1</span>])  <span class="comment"># 输出 [&#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;] 注意这里的顺序是因为步长为-1</span></span><br></pre></td></tr></table></figure></li><li><p>获取长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length = <span class="built_in">len</span>(my_list)</span><br></pre></td></tr></table></figure></li><li><p>列表迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li></ul><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式是一种简洁的方式来创建列表，它允许你根据一个或多个表达式生成一个新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 元素 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件]</span><br><span class="line"></span><br><span class="line">filtered_td_text = [text <span class="keyword">for</span> text <span class="keyword">in</span> td_text <span class="keyword">if</span> text != <span class="string">&quot;详情&quot;</span>]</span><br><span class="line"><span class="comment"># 这里表达式是text，元素是td_text，条件是text != &quot;详情&quot;，表达式是要存入列表的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li><p>创建字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>访问字符串元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char = my_string[<span class="number">0</span>] <span class="comment"># 返回 H</span></span><br><span class="line">char = my_string[-<span class="number">1</span>] <span class="comment"># 返回 !</span></span><br><span class="line">char = my_string[<span class="number">6</span>:] <span class="comment"># 返回 World! 同样可以切片处理</span></span><br></pre></td></tr></table></figure></li><li><p>常见函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算字符串长度</span></span><br><span class="line">s = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># 输出 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找字符串位置</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;world&quot;</span>))  <span class="comment"># 输出 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串中的子字符串</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;universe&quot;</span>))  <span class="comment"># 输出 &quot;hello universe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据分隔符分割字符串</span></span><br><span class="line">s = <span class="string">&quot;apple,banana,cherry&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot;,&quot;</span>))  <span class="comment"># 输出 [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]，以列表返回</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot;,&quot;</span>, <span class="number">1</span>))  <span class="comment"># 输出 [&#x27;apple&#x27;, &#x27;banana,cherry&#x27;]，只分割一次</span></span><br><span class="line"><span class="built_in">print</span>(s.split()) <span class="comment"># 输出 [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]，默认以空格分割</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换</span></span><br><span class="line">s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.lower()) <span class="comment"># 输出 hello，转换为小写</span></span><br><span class="line"><span class="built_in">print</span>(s.upper()) <span class="comment"># 输出 HELLO，转换为大写</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize())  <span class="comment"># 输出 &quot;Hello world&quot;，第一个字符为大写，其他为小写</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.title())  <span class="comment"># 输出 &quot;Hello World&quot; 将每个单词的首字母转换为大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查字符串</span></span><br><span class="line">s = <span class="string">&quot;Hello World&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(s.isdigit()) <span class="comment"># 输出False，检查是否只包含数字</span></span><br><span class="line"><span class="built_in">print</span>(s.isalpha()) <span class="comment"># 输出True，检查是否只包含字母</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#123;&#125;, and I am &#123;&#125; years old.&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My name is <span class="subst">&#123;name&#125;</span>, and I am <span class="subst">&#123;age&#125;</span> years old.&quot;</span>) <span class="comment"># 两种写法均可</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典类似于哈希表，它存储的是键值对，每个键对应一个值。</p><ul><li>创建字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125; <span class="comment"># 通过键值对创建字典</span></span><br><span class="line">my_dict = <span class="built_in">dict</span>(name=<span class="string">&#x27;Alice&#x27;</span>, age=<span class="number">25</span>) <span class="comment"># 通过关键字参数创建字典</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>访问字典元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">value = my_dict[<span class="string">&#x27;name&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(value) <span class="comment"># 输出 Alice</span></span><br><span class="line">value = my_dict.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(value) <span class="comment"># 输出 Alice</span></span><br><span class="line">value = my_dict.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(value) <span class="comment"># 输出 25</span></span><br></pre></td></tr></table></figure><p>获取字典的键、值、键值对的视图对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keys = my_dict.keys()</span><br><span class="line">values = my_dict.values()</span><br><span class="line">items = my_dict.items()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(keys)  <span class="comment"># 输出 dict_keys([&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(values) <span class="comment"># 输出 dict_values([&#x27;Alice&#x27;, 25])</span></span><br><span class="line"><span class="built_in">print</span>(items) <span class="comment"># 输出 dict_items([(&#x27;name&#x27;, &#x27;Alice&#x27;), (&#x27;age&#x27;, 25)])</span></span><br></pre></td></tr></table></figure><ul><li>添加、修改和删除元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line"><span class="comment"># 直接给一个新的键赋值即可添加新的键值对</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">my_dict[<span class="string">&#x27;city&#x27;</span>] = <span class="string">&#x27;New York&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用update()方法一次性添加多个键值对</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">my_dict.update(&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line"><span class="comment"># 直接赋值</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line">my_dict[<span class="string">&#x27;age&#x27;</span>] = <span class="number">26</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以用update()方法</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line">my_dict.update(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">26</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="comment"># del语句</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> my_dict[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()方法</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line">age = my_dict.pop(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(age)  <span class="comment"># 输出 25</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)  <span class="comment"># 输出 &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>遍历字典<br>遍历字典的键<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># city</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 keys() 方法</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dict.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># city</span></span><br></pre></td></tr></table></figure>遍历字典的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历字典的值</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> my_dict.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Alice</span></span><br><span class="line"><span class="comment"># 25</span></span><br><span class="line"><span class="comment"># New York</span></span><br></pre></td></tr></table></figure><p>遍历字典的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历字典的键值对</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_dict.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>, Value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Key: name, Value: Alice</span></span><br><span class="line"><span class="comment"># Key: age, Value: 25</span></span><br><span class="line"><span class="comment"># Key: city, Value: New York</span></span><br></pre></td></tr></table></figure><h2 id="关于字典推导式"><a href="#关于字典推导式" class="headerlink" title="关于字典推导式"></a>关于字典推导式</h2><p>字典也可以像列表那样使用推导式来传值，比如说我需要让两个列表一对多映射传入字典里面，可以使用字典推导式来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">details_per_name = <span class="built_in">len</span>(processed_td_text) // <span class="built_in">len</span>(p_name)</span><br><span class="line">data_dict = &#123;</span><br><span class="line">    p_name[i] : processed_td_text[i * details_per_name : (i + <span class="number">1</span>) * details_per_name]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p_name))</span><br><span class="line">        &#125; <span class="comment"># 此处存储数据的方法：字典推导式和嵌套切片</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>列表推导式和字典推导式都是Python中的高级数据结构，它们允许你根据一个或多个表达式生成一个新列表或字典。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机软件 </tag>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言知识笔记2</title>
      <link href="/2024/09/19/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B02/"/>
      <url>/2024/09/19/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="Types-Operators-and-Expressions"><a href="#Types-Operators-and-Expressions" class="headerlink" title="Types, Operators and Expressions"></a>Types, Operators and Expressions</h1><blockquote><p>从这一章节开始，将会采用常用的C标准</p></blockquote><hr><blockquote><p>Variables and constants are the basic data objects manipulated in a program. Declarations list the variables to be used, and state what type they have and perhaps what their initial values are. Operators specify what is to be done to them. Expressions combine variables and constants to produce new values. The type of an object determines the set of values it can have and what operations can be performed on it. These building blocks are the topics of this chapter.</p></blockquote><p>本章节将详细介绍各种变量类型，运算符以及表达式。</p><h2 id="Variables-Names"><a href="#Variables-Names" class="headerlink" title="Variables Names"></a>Variables Names</h2><blockquote><p>Names are made up of letters and digits; the first character must be a letter. The underscore &#96;&#96;_’’ counts as a letter; it is sometimes useful for improving the readability of long variable names.</p></blockquote><p>变量名由字母和数字组成，第一个字符必须是字母。下划线<code>_</code>可以作为字母，在较长的变量名中可提高阅读性。变量不要以<code>_</code>开头，因为一些库的函数可能会以<code>_</code>开头，如<code>_getchar()</code>。<br>注意，变量是区分大小写的，<code>x</code>和<code>X</code>是完全不同的两个变量，在传统C开发中，一般变量用小写，常量用大写。</p><p>像<code>int</code>、<code>char</code>、<code>float</code>、<code>double</code>等关键字不能作为变量名。</p><h2 id="Data-Types-and-Sizes"><a href="#Data-Types-and-Sizes" class="headerlink" title="Data Types and Sizes"></a>Data Types and Sizes</h2><p>这有一些基本的数据类型：</p><ul><li><code>int</code> 表示整数，可以表示正负整数。</li><li><code>float</code>表示浮点数，可以表示小数。</li><li><code>double</code>表示双精度浮点数，可以表示小数。</li></ul><p>另外，还有能表示更长或更短的数据形式比如<code>short</code>和<code>long</code>，都是整型变量。一般<code>int</code>的长度会由编辑器决定，<code>short</code>一般是16bit，<code>int</code> 32bit或16bit都有可能，但是，<code>short</code>和<code>int</code>至少要高于16bit，<code>long</code>至少32bit，而且 <code>short</code>绝对比<code>int</code>短，且都必须比<code>long</code>短。</p><ul><li><p>关于<code>singned</code>和<code>unsigned</code></p></li><li><p><code>signed</code>表示有符号的，可以表示正负整数，<code>unsigned</code>表示无符号的，只能表示正整数。</p></li><li><p>关于<code>char</code>, <code>char</code>表示字符，可以表示一个字符，如<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code></p></li><li><p><code>char</code>的大小是8bit，但是<code>char</code>本质上是一个整数类型。这是因为 char 类型在内存中存储的是整数，这些整数对应于特定的字符编码（如 ASCII 编码）。这意味着 char 类型可以用来存储单个字符，同时也能够存储在该编码下的整数值。</p></li><li><p>所以char也有符号之分，并且可以存储负数。</p></li></ul><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p><code>int</code> 类型如<code>1234</code>，<code>long</code>会加上<code>L</code>，如<code>1234L</code>。unsigned的类型会加上<code>u</code>或者<code>U</code>。</p><p><code>int</code>的进制可以为十进制，八进制和十六进制。</p><ol><li>十进制：直接输入数字，如<code>1234·</code></li><li>八进制：以<code>0</code>开头，如<code>01234</code></li><li>十六进制：以<code>0x</code>或<code>0X</code>开头，如<code>0x1234</code></li><li>其他进制：如<code>0b1010</code>，<code>0o1234</code><blockquote><p>为何没有二进制？ 在 C 语言中，int 类型本身并不直接支持二进制字面量。直到 C99 标准之后，C 语言引入了 _Complex 和 _Imaginary 关键字，但这些与二进制字面量无关。直到 C11 标准，C 语言才正式支持了二进制字面量以及其他基数的字面量表示。</p></blockquote></li></ol><p>字符常量也是一种整型，在前文提到过,此处不再过多讲解。<br>关于转义字符，请看下表</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\t</code></td><td>制表符（水平制表）</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr><tr><td><code>\b</code></td><td>退格符</td></tr><tr><td><code>\\</code></td><td>反斜杠符</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\0</code></td><td>空字符（NUL）</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\f</code></td><td>换页符</td></tr><tr><td><code>\?</code></td><td>问号符（防止与三元运算符冲突）</td></tr><tr><td><code>\xhh</code></td><td>以十六进制表示的字符</td></tr><tr><td><code>\ooo</code></td><td>以八进制表示的字符</td></tr></tbody></table><p>关于 <code>\0</code>有必要单独讲解</p><ul><li>‘\0’ 是一个特殊的字符，表示 空字符 或 null 字符。它的 ASCII 值为 0。</li><li>在字符串中，’\0’ 通常用来标记字符串的结束。</li><li>字符数组（即字符串）通常以 ‘\0’ 结束，以便字符串处理函数（如 strlen()、strcpy() 等）知道字符串的边界。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;Hello&quot;</span>;  <span class="comment">// 字符串 &quot;Hello&quot;</span></span><br><span class="line">    str[<span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>;          <span class="comment">// 手动添加 null 字符</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;String: %s\n&quot;</span>, str);  <span class="comment">// 输出 &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 strlen 计算字符串长度</span></span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Length: %d\n&quot;</span>, length);  <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Declarations"><a href="#Declarations" class="headerlink" title="Declarations"></a>Declarations</h2><blockquote><p>All variables must be declared before use, although certain declarations can be made implicitly by content.</p></blockquote><p>所有变量必须在使用前声明，尽管某些声明可以隐式地声明</p><ol><li>显式声明：在变量名前加上类型，如<code>int x;</code>，<code>float y;</code>，<code>char z;</code></li><li>隐式声明：在函数中，如果函数没有显式声明，那么函数中的变量会被隐式声明，如<code>x = 1;</code>，<code>y = 2.0;</code>，<code>z = &#39;a&#39;;</code></li></ol><p>限定字符<code>const</code>可以禁止变量被修改，如<code>const int x = 1;</code>，<code>const float y = 2.0;</code>，<code>const char z = &#39;a&#39;;</code></p><p>建议在变量声明后赋初值，如<code>int x = 1;</code>，<code>float y = 2.0;</code>如果不赋初值，会导致一些未知的问题和影响，甚至会使程序崩溃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">example</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;  <span class="comment">// 不赋初值的局部变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d\n&quot;</span>, x);  <span class="comment">// 输出未定义的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    example();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 计算机软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言知识笔记1</title>
      <link href="/2024/09/10/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B01/"/>
      <url>/2024/09/10/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文章基于《C Programming Language (2nd Edition)》,主要是本人对 C 语言的具体认识以及对 C 程序语言的阅读感想。</p></blockquote><h1 id="A-Tutorial-Introduction"><a href="#A-Tutorial-Introduction" class="headerlink" title="A Tutorial Introduction"></a>A Tutorial Introduction</h1><blockquote><p>We have to concentrate on the basics: variables and constants, arithmetic, control flow, functions, and the rudiments of input and output.</p></blockquote><blockquote><p>The C programming language include pointers, structures, most of C’s rich set of operators, several control−flow statements, and the standard library.</p></blockquote><p>简单粗暴的来说 C 语言的基础包含变量与常量，控制流，函数以及一些入门的输入输出。语言性质还包含了指针，结构体，算子集，以及标准库。</p><p><strong>C 语言是一个面向过程的编程语言！</strong></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><blockquote><p>In C, the program to print <em>hello,world</em> is</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    main()</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>you should create the program in a file whose name ends in <code>.c</code> such as <code>hello.c</code> compile it with the command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc hello.c</span><br></pre></td></tr></table></figure><p>当你照做后，你会发现在 GCC 编译器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello.c:4:1: error: <span class="built_in">return</span> <span class="built_in">type</span> defaults to ‘int’ [-Wimplicit-int]</span><br><span class="line">    4 | main()</span><br><span class="line">      | ^~~~</span><br></pre></td></tr></table></figure><blockquote><p>为什么会报错呢？因为在旧的 C 编译器中是允许这样的写法，但是随着 C 语言语法的规范化逐渐不再使用这种写法，为了代码的可移植性和清晰性，推荐写成<code>int main()</code> 或者<code>int main(int argc, char *argv[])</code></p></blockquote><blockquote><p>Our example is a function named main. Normally you are at liberty togive functions whatever names you like, but <code>main</code> is special − your program begins executing at thebeginning of main. This means that every program must have a main somewhere</p></blockquote><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个是 C 的头文件，我们接下来一点一点讲解这行代码。<br><code>#include</code>叫做文件包含命令，用来引入对应的头文件（.h 文件）。#include 也是 C 语言预处理命令的一种。</p><p>有两种常用的 #include 方式：</p><ol><li>尖括号方式 <code>&lt; &gt;</code>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>双引号方式<code>“ ”</code>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myheader.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>使用双引号时，编译器首先会在<strong>当前源文件所在的目录</strong>查找头文件。如果没有找到，再去标准系统目录中查找。常用于引入<strong>用户自定义</strong>的头文件。<br>使用尖括号时，编译器会在<strong>标准系统目录</strong>（如编译器自带的头文件路径）中查找头文件。常用于引入<strong>标准库</strong>或<strong>第三方库</strong>的头文件。</p><p>C 语言一切都是从 main 开始的，main 是主函数，是程序开始的接口，任何函数都是从这里开始的。</p><blockquote><p>The statements of a function are enclosed in braces { }. The function main contains only one statement</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>函数<code>printf()</code>是一个库函数负责打印输出，在双引号中是要输出的字符串。<code>\n</code>是转义字符，在这里是为了自动换行。</p><blockquote><p>Notice that \n represents only a single character. An escape sequence like \n provides a general andextensible mechanism for representing hard−to−type or invisible characters. Among the others that C providesare \t for tab, \b for backspace, &quot; for the double quote and \ for the backslash itself</p></blockquote><hr><h2 id="Variables-and-Arithmetic-Expressions"><a href="#Variables-and-Arithmetic-Expressions" class="headerlink" title="Variables and Arithmetic Expressions"></a>Variables and Arithmetic Expressions</h2><blockquote><p>Any characters between &#x2F;_ and _&#x2F;are ignored by the compile<br>Comments may appear anywhere where a blank, tab or newline can.<br>这里提到了多行注释,用<code>/* */</code>包括注释块，编译器会无视它。</p></blockquote><blockquote><p>In C, all variables must be declared before they are used, usually at the beginning of the function before anyexecutable statements. A declaration announces the properties of variables; it consists of a name and a list of variables, such as</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> fahr, celsius;</span><br><span class="line"><span class="type">int</span> lower, upper, step;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用 C 语言的变量之前，必须先声明，一般在要使用的函数或可执行语句之前，C 读取程序是按照顺序一行一行读取的，所以变量一定要提前声明好。</p><p>常用的变量类型如下表所示：</p><table><thead><tr><th>类型关键字</th><th>描述</th></tr></thead><tbody><tr><td><code>char</code></td><td>存储单个字符，占用 1 字节</td></tr><tr><td><code>int</code></td><td>存储整数，通常占用 4 字节（具体大小取决于编译器和系统）</td></tr><tr><td><code>float</code></td><td>存储单精度浮点数，遵循 IEEE 754 标准</td></tr><tr><td><code>double</code></td><td>存储双精度浮点数，比 float 有更高的精度和更大的范围</td></tr><tr><td><code>unsigned</code></td><td>无符号类型，可以存储正数和零，通常比有符号类型有更大的范围</td></tr><tr><td><code>short</code></td><td>短整型，通常占用 2 字节</td></tr><tr><td><code>long</code></td><td>长整型，通常占用 8 字节（在某些系统上可能是 4 字节）</td></tr><tr><td><code>long long</code></td><td>长长整型，至少占用 64 位</td></tr><tr><td><code>void</code></td><td>表示没有类型，用于函数没有返回值或指向无类型数据的指针</td></tr><tr><td><code>_Bool</code></td><td>布尔类型，存储值为 0 或 1，定义在 C99 标准中</td></tr><tr><td><code>_Complex</code></td><td>复数类型，用于存储复数，定义在 C99 标准中</td></tr></tbody></table><hr><blockquote><p>Each line of the table is computed the same way, so we use a loop that repeats once per output line; this is thepurpose of the while loop</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">    i = <span class="number">2</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果每行都运行相同的程序，会显得很麻烦，可以使用 while 循环，在循环结构中，我们习惯性的按<code>Tab</code>键缩进，虽然 C 不会在意程序的外观，但为了程序的可读性，这是需要的。我们用<code>&#123;&#125;</code>包含循环内的程序，如果这里不用<code>&#123;&#125;</code>，那么 C 就只会默认执行 while 内的第一行程序。</p><hr><blockquote><p>printf is a general−purpose output formatting function.Its first argument is a string of characters to be printed, with each % indicating where one of the other (second, third, …) arguments is to be substituted, and in what form it is to be printed.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t%d\n&quot;</span>, fahr, celsius);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于<code>printf()</code>里面的<code>%d</code>,以及类似的占位符请看下表</p><table><thead><tr><th>占位符</th><th>描述</th></tr></thead><tbody><tr><td><code>%d</code></td><td>打印十进制整数（有符号）</td></tr><tr><td><code>%i</code></td><td>与 <code>%d</code> 相同</td></tr><tr><td><code>%u</code></td><td>打印十进制整数（无符号）</td></tr><tr><td><code>%o</code></td><td>打印八进制整数</td></tr><tr><td><code>%x</code></td><td>打印十六进制整数（小写字母）</td></tr><tr><td><code>%X</code></td><td>打印十六进制整数（大写字母）</td></tr><tr><td><code>%c</code></td><td>打印单个字符</td></tr><tr><td><code>%s</code></td><td>打印字符串</td></tr><tr><td><code>%f</code></td><td>打印浮点数（默认精度为 6 位小数）</td></tr><tr><td><code>%lf</code></td><td>打印双精度浮点数</td></tr><tr><td><code>%e</code></td><td>打印科学计数法表示的浮点数</td></tr><tr><td><code>%g</code></td><td>打印一般浮点数（根据数值的大小自动选择 <code>%f</code> 或 <code>%e</code>）</td></tr><tr><td><code>%p</code></td><td>打印指针（地址）</td></tr><tr><td><code>%%</code></td><td>打印百分号字符 <code>%</code></td></tr><tr><td><code>%n</code></td><td>打印到目前为止输出的字符数（用于计数）</td></tr></tbody></table><blockquote><p>By the way, printf is not part of the C language; there is no input or output defined in C itself. printf is just a useful function from the standard library of functions that are normally accessible to C programs. The behaviour of printf is defined in the ANSI standard, however, so its properties should be the same with anycompiler and library that conforms to the standard.</p></blockquote><p>这段话大致讲述了<code>printf()</code>和 C 的关系，C 并非包含<code>printf()</code>,而是 C 的标准库函数，所以需要引入标准库<code>stdio.h</code>(standard input output)。</p><p>关于浮点数，以下占位符请见下表：</p><table><thead><tr><th>占位符</th><th>描述</th><th>示例</th><th>输出</th></tr></thead><tbody><tr><td><code>%f</code></td><td>打印浮点数，默认精度为 6 位小数</td><td><code>printf(&quot;%.2f\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%e</code></td><td>打印科学计数法表示的浮点数</td><td><code>printf(&quot;%.2e\n&quot;, 123.456789);</code></td><td>1.23e+02</td></tr><tr><td><code>%g</code></td><td>打印一般浮点数，自动选择 <code>%f</code> 或 <code>%e</code></td><td><code>printf(&quot;%.2g\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%lf</code></td><td>打印双精度浮点数（与 <code>%f</code> 相同）</td><td><code>printf(&quot;%.2lf\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%.2f</code></td><td>打印浮点数并保留两位小数</td><td><code>printf(&quot;%.2f\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%.3f</code></td><td>打印浮点数并保留三位小数</td><td><code>printf(&quot;%.3f\n&quot;, 123.456789);</code></td><td>123.457</td></tr><tr><td><code>%.1f</code></td><td>打印浮点数并保留一位小数</td><td><code>printf(&quot;%.1f\n&quot;, 123.456789);</code></td><td>123.5</td></tr></tbody></table><h2 id="The-for-statement"><a href="#The-for-statement" class="headerlink" title="The for statement"></a>The for statement</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">/* print Fahrenheit−Celsius table */</span></span></span><br><span class="line">    main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fahr;</span><br><span class="line">    <span class="keyword">for</span> (fahr = <span class="number">0</span>; fahr &lt;= <span class="number">300</span>; fahr = fahr + <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d %6.1f\n&quot;</span>, fahr, (<span class="number">5.0</span>/<span class="number">9.0</span>)*(fahr−<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The for statement is a loop, a generalization of the while. If you compare it to the earlier while, it soperation should be clear.<br>for 语句有三个部分：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>第一个部分在循环开始前执行，将<code>0</code>赋值给<code>fahr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr &lt;= <span class="number">300</span></span><br></pre></td></tr></table></figure><p>第二个部分，是循环的条件，条件满足时，循环工作，当<code>fahr</code>达到<code>300</code>时，代表循环结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr = fahr + <span class="number">20</span></span><br></pre></td></tr></table></figure><p>第三个部分相当于一个步长，每次循环 fahr 都会加 20<br>这三个部分都会控制循环的次数</p><h2 id="Symbolic-Constants"><a href="#Symbolic-Constants" class="headerlink" title="Symbolic Constants"></a>Symbolic Constants</h2><blockquote><p>A #define line defines a symbolic name or symbolic constant to be aparticular string of characters</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOWER 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UPPER 200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEP 20</span></span><br></pre></td></tr></table></figure><p><code>LOWER</code> <code>UPPER</code> <code>STEP</code> 这些都是符号常量，注意，不是变量，而且这些值相当于是预处理命令，用<code>#define</code>来设置。</p><h2 id="Character-Input-and-Output"><a href="#Character-Input-and-Output" class="headerlink" title="Character Input and Output"></a>Character Input and Output</h2><blockquote><p>The standard library provides several functions for reading or writing one character at a time, of which <code>getchar</code> and <code>putchar</code> are the simplest. Each time it is called, getchar reads the next input character from a text stream and returns that as its value.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = getchar();</span><br></pre></td></tr></table></figure><p><code>getchar()</code>用于从键盘中检测输入的字符，注意不是字符串<br><code>putchar()</code>用于输出字符，虽然有的地方会写用<code>puts()</code>函数</p><h3 id="File-Copying"><a href="#File-Copying" class="headerlink" title="File Copying"></a>File Copying</h3><p>这里有一个复制一个字符的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c != EOF) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>!=</code>的意思是“不等于”</p></blockquote><p><code>EOF</code>是一个表示文件结束（End of File）的常量。它用于标识当程序从输入流中读取到文件或数据流的末尾时的状态。EOF 通常被定义为 -1，并且是在 stdio.h 头文件中定义的宏。</p><p>这个程序的意思是读取一个字符存入<code>c</code>,检查<code>c</code>是否为<code>EOF</code>,不是的话将<code>c</code>输出，继续读取字符，直到<code>EOF</code>条件达成，循环停止</p><h3 id="File-Counting"><a href="#File-Counting" class="headerlink" title="File Counting"></a>File Counting</h3><p>接下来看一下这个计数的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="comment">//count characters in input; 1st version</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> nc;</span><br><span class="line">    <span class="keyword">while</span> (getchar != EOF)</span><br><span class="line">        ++nc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The statement<code>++nc</code>persents a new operator <code>++</code>, whitch means <em>increment by one</em>.</p></blockquote><p>这样的操作可以避免写 <code>nc = nc+1</code>，这种写法不仅简单，还更有效率。<br>在这个程序中涉及到了 <code>long</code> 这种变量，而不是<code>int</code>,这里的<code>long</code>是一个长整型变量，它的存储比整型更高位的数字，需要使用<code>%ld</code>告诉<code>printf()</code>这个变量是长整型</p><p>可以把这个程序改成 for 循环类型,以及双精度浮点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="comment">//count characters in input; 2nd version</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> nc;</span><br><span class="line">    <span class="keyword">for</span> (nc =<span class="number">0</span>; getchar() != EOF;++nc)</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0f\n&quot;</span>, nc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The body of this for loop is empty, because all the work is done in the test and increment parts. But thegrammatical rules of C require that a for statement have a body. The isolated semicolon, called a nullstatement, is there to satisfy that requirement. We put it on a separate line to make it visible.</p></blockquote><h3 id="Line-Counting"><a href="#Line-Counting" class="headerlink" title="Line Counting"></a>Line Counting</h3><p>这是一个记录行数的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="type">int</span> c, nl;</span><br><span class="line"></span><br><span class="line">    nl = <span class="number">0</span>; <span class="comment">// 行计数器初始化为0</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != EOF) &#123; <span class="comment">// 读取输入字符，直到遇到EOF</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 检查是否是换行符</span></span><br><span class="line">            ++nl; <span class="comment">// 如果是换行符，行计数器加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nl); <span class="comment">// 输出行数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C 语言是支持嵌套的，程序中<code>while()</code>里面嵌套了<code>if</code>。<br><code>==</code>这里是等号，为了和<code>=</code>（赋值）作区分</p><h3 id="Word-Counting"><a href="#Word-Counting" class="headerlink" title="Word Counting"></a>Word Counting</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IN  1  <span class="comment">// 表示在一个单词内部</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT 0  <span class="comment">// 表示在一个单词外部</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> c, nl, nw, nc, state;</span><br><span class="line"></span><br><span class="line">    state = OUT;</span><br><span class="line">    nl = nw = nc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != EOF) &#123;</span><br><span class="line">        ++nc;  <span class="comment">// 统计字符数量</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            ++nl;  <span class="comment">// 统计行数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            state = OUT;  <span class="comment">// 当前字符是空白符，表示不在单词内</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == OUT) &#123;</span><br><span class="line">            state = IN;  <span class="comment">// 如果之前不在单词内，遇到非空白字符，进入单词</span></span><br><span class="line">            ++nw;  <span class="comment">// 统计单词数量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, nl, nw, nc);  <span class="comment">// 输出行数、单词数和字符数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>state = OUT;</code>：初始状态为 OUT，即程序开始时不在单词内。<br><code>nl = nw = nc = 0;</code>：行数、单词数和字符数均初始化为 0。</p><p><code>#define IN 1</code>和 <code>#define OUT 0</code>：定义两个符号常量，IN 表示程序处于一个单词的内部，OUT 表示程序处于一个单词的外部。这种定义方式也被成为宏定义。</p><p><code>if (c == &#39; &#39; || c == &#39;\n&#39; || c == &#39;\t&#39;) state = OUT;</code>：如果读取到空格、换行符或制表符，则表示不在单词内部，state 设置为 OUT。<code>||</code>代表着或逻辑，所有参数中只要有一个参数为<code>True</code>,所有的参数都返回<code>True</code>。</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><blockquote><p>Let is write a program to count the number of occurrences of each digit, of white space characters (blank, tab,newline), and of all other characters. This is artificial, but it permits us to illustrate several aspects of C in one program:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, i, nWhite, nother;</span><br><span class="line">    <span class="type">int</span> ndigit[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    nWhite = nother=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        ndigit[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (c = getchar() != EOF)</span><br><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;c &lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            ++ndigit[c-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            ++nWhite;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ++nother;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;digits = &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ndigit[i]);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="string">&quot;, white space = %d, other = %d\n&quot;</span>,nwhite,nother));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出：digits &#x3D; 9 3 0 0 0 0 0 0 0 1, white space &#x3D; 123, other &#x3D; 345</p></blockquote><blockquote><p>The declaration <code>int ndigit[10];</code>declares ndigit to be an array of 10 integers. Array subscripts always start at zero in C, so the elements are ndigit[0], ndigit[1], …, ndigit[9]. This is reflected in the for loops that initialize and print the array</p></blockquote><ol><li><p><code>int ndigit[10];</code>：定义一个数组，数组大小为 10，每个元素类型为整型。数组的<code>[]</code>我们称为下标(subscript),数组的下标都是从 0 开始，所以数组的元素为<code>ndigit[0]</code>，<code>ndigit[1]</code>，…，<code>ndigit[9]</code>。</p></li><li><p><code>for (i = 0; i&lt;10; ++i)</code>：初始化数组，将数组所有元素初始化为 0。</p></li><li><p><code>if(c &gt;= &#39;0&#39; &amp;c &lt;=&#39;9&#39;)</code>：判断当前字符是否为数字，如果是，则将当前字符对应的数组元素加 1。</p></li><li><p><code>else if (c == &#39; &#39; || c == &#39;\n&#39; || c == &#39;\t&#39;)</code>：判断当前字符是否为空格、换行符或制表符，如果是，则将<code>nWhite</code>加 1。</p></li><li><p><code>else</code>：判断当前字符是否为其他字符，如果是，则将<code>nother</code>加 1。</p></li><li><p><code>printf(&quot;digits = &quot;);</code>：输出”digits &#x3D; “。</p></li><li><p><code>for(i = 0;i&lt;10; ++i)</code>：输出数组中的元素，格式为<code>%d</code>，表示整型。</p></li><li><p><code>printf((&quot;, white space = %d, other = %d\n&quot;,nwhite,nother));</code>：输出<code>nwhite</code>和<code>nother</code>的值，格式为<code>%d</code>，表示整型。</p></li></ol><hr><ul><li>题外话：</li></ul><p>数组是最基础的数据结构之一，提到数据结构，往往会想到增、删、查、改四个操作，我们可以通过下标访问数组中的元素，也可以通过下标修改数组中的元素。</p><ol><li>首先初始化数组<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100  <span class="comment">// 定义数组的最大容量</span></span></span><br><span class="line"><span class="type">int</span> data[MAX_SIZE];  <span class="comment">// 定义数组</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;       <span class="comment">// 当前存储的数据数量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>添加元素(增)<br>添加元素时，如果数组已满，则无法直接添加。可以通过检查当前计数器是否小于最大容量来判断是否可以添加。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; MAX_SIZE) &#123;</span><br><span class="line">        data[count++] = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组已满，无法添加。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除元素(删)<br>由于数组是连续的，删除特定值时，不会自动移位，需要遍历数组找到该值并将其后的所有元素向前移动一位。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从数据集中删除指定值的函数</span></span><br><span class="line"><span class="comment">// 参数 value: 要删除的值</span></span><br><span class="line"><span class="comment">// 注意：这个函数假设有一个全局变量 &#x27;data&#x27; 用于存储数据，以及一个全局变量 &#x27;count&#x27; 表示当前数据集中的元素数量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化遍历索引</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 遍历数据集查找要删除的值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果找到了要删除的元素</span></span><br><span class="line">        <span class="keyword">if</span> (data[i] == value) &#123;</span><br><span class="line">            <span class="comment">// 结束循环，i现在指向要删除的元素</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果找到了要删除的元素</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; count) &#123;</span><br><span class="line">        <span class="comment">// 将所有在要删除元素后的元素向前移动一位</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; count - <span class="number">1</span>) &#123;</span><br><span class="line">            data[i] = data[i + <span class="number">1</span>];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 减少数据集的计数，表示一个元素已被删除</span></span><br><span class="line">        count--;</span><br><span class="line">        <span class="comment">// 输出删除成功的消息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 输出未找到该元素的消息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到该元素。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查找元素(查)<br>查找元素可以直接通过索引访问，也可以搜索某个值是否存在。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过索引查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_by_index</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; count) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 假设-1表示未找到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_value</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i] == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 返回索引</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改元素(改)<br>修改元素通常也是基于索引来操作。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> new_value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; count) &#123;</span><br><span class="line">        data[index] = new_value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;索引超出范围。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><blockquote><p>A function provides a convenient way to encapsulate some computation, which can then be used without worrying about its implementation. </p></blockquote><p>函数提供了一种封装计算，使其可以方便使用的方式。函数可以被重复使用，而无需关心其内部实现。</p><p>之前我们就已经学会使用一些函数了比如<code>getchar()</code>，<code>putchar()</code>，<code>printf()</code>等。现在，是时候自己来写一个函数了。<br>C最早是无法像Fortran或者Python那样用<code>**</code>来进行幂运算，所以下面的程序我们自定义一个函数用来求幂。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算给定基数的幂</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param base 基数</span></span><br><span class="line"><span class="comment"> * @param n 幂次</span></span><br><span class="line"><span class="comment"> * @return 计算结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">power</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> n)</span>; <span class="comment">// 函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主函数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通过调用power函数，打印2的幂和-3的幂</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return 返回程序退出码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 遍历0到9，打印不同基数的幂</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, i, power(<span class="number">2</span>, i), power(<span class="number">-3</span>, i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算给定基数的幂</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param base 基数</span></span><br><span class="line"><span class="comment"> * @param n 幂次</span></span><br><span class="line"><span class="comment"> * @return 计算结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">power</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, p;</span><br><span class="line">    p = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 通过循环计算幂值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        p = p * base;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的定义遵循以下格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">(parameter declaration <span class="keyword">if</span> any)</span></span><br><span class="line">&#123;</span><br><span class="line">    declarations</span><br><span class="line">    statements</span><br><span class="line">    <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的声明格式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">(parameter declaration <span class="keyword">if</span> any)</span>;</span><br></pre></td></tr></table></figure><p>在函数声明时是可以不写出参数的声明，但是函数定义时必须写出参数的声明。<br>如果函数没有返回值，可以省略<code>return_type</code>，直接写<code>void</code>。</p><h2 id="Arguments-Call-by-Value"><a href="#Arguments-Call-by-Value" class="headerlink" title="Arguments - Call by Value"></a>Arguments - Call by Value</h2><blockquote><p>In C, all function arguments are passed <code>by value</code>. This means that the called function is given the values of its arguments in temporary variables rather than the originals. This leads to some different properties than are seen with <code>call by reference </code>languages like Fortran or with var parameters in Pascal, in which the called routine has access to the original argument, not a local copy.<br>在C中，所有函数参数都是通过值传递的。这意味着被调用的函数被赋予了参数的临时变量而不是原始值。这导致一些与<code>call by reference</code>语言（如Fortran或Pascal中的var参数）中看到的不同特性。</p></blockquote><ol><li>函数参数是临时变量：在函数调用时，函数参数被赋予临时变量，而不是原始参数。</li><li>函数参数是独立的：函数参数是独立的，对函数参数的修改不会影响原始参数。</li><li>函数参数是只读的：函数参数是只读的，不能修改函数参数的值。</li></ol><p>请看下面程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数参数是临时变量 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    change(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出为：<br>a &#x3D; 10<br>a &#x3D; 20<br>a &#x3D; 10</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数参数是独立的 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    change(&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">    *a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, *a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出为：<br>a &#x3D; 10<br>a &#x3D; 20<br>a &#x3D; 20<br>a &#x3D; 20</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数参数是只读的 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    change(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出为：<br>a &#x3D; 10<br>a &#x3D; 20<br>a &#x3D; 10</p></blockquote><h2 id="Character-Arrays"><a href="#Character-Arrays" class="headerlink" title="Character Arrays"></a>Character Arrays</h2><blockquote><p>The most common type of array in C is the array of characters. To illustrate the use of character arrays and functions to manipulate them, let’s write a program that reads a set of text lines and prints the longest. The outline is simple enough:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( there<span class="number">&#x27;</span>s another line)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(it<span class="number">&#x27;</span>s longer than the previous longest)</span><br><span class="line">    (save it)</span><br><span class="line">    (save its length)</span><br><span class="line">    print the longest line</span><br><span class="line">&#125;</span><br><span class="line">This outline makes it clear that the program divides naturally into pieces. One piece gets a new line, another saves it, and the rest controls the process.</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 读取文本行：使用`fgets()`函数读取一行文本，直到遇到换行符为止。</span><br><span class="line"><span class="number">2.</span> 比较行长度：使用`<span class="built_in">strlen</span>()`函数计算行长度，并与之前的最长行进行比较。</span><br><span class="line"><span class="number">3.</span> 保存最长行：如果当前行更长，则保存该行。</span><br><span class="line"><span class="number">4.</span> 打印最长行：打印保存的最长行。</span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLINE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取一行文本到line数组中，并返回读取到的字符数。</span></span><br><span class="line"><span class="comment"> * 如果到达文件末尾或读取失败，返回0。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param s 目标字符串数组</span></span><br><span class="line"><span class="comment"> * @param lim 字符数组的最大容量</span></span><br><span class="line"><span class="comment"> * @return 返回读取到的字符数（不包括终止符&#x27;\0&#x27;）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> getline(<span class="type">char</span> s[], <span class="type">int</span> lim);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主函数</span></span><br><span class="line"><span class="comment"> * 该程序读取文本行，并打印出长度超过80个字符的行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span> line[MAXLINE];</span><br><span class="line">    <span class="comment">// 循环读取文本行，直到文件结束或读取失败</span></span><br><span class="line">    <span class="keyword">while</span> ((len = getline(line, MAXLINE)) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 如果文本行长于80个字符，则打印出来</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">80</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, line);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取一行文本到line数组中，并返回读取到的字符数。</span></span><br><span class="line"><span class="comment"> * 如果到达文件末尾或读取失败，返回0。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param s 目标字符串数组</span></span><br><span class="line"><span class="comment"> * @param lim 字符数组的最大容量</span></span><br><span class="line"><span class="comment"> * @return 返回读取到的字符数（不包括终止符&#x27;\0&#x27;）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getline</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> lim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, i;</span><br><span class="line">    <span class="comment">// 读取字符，直到达到数组容量上限、遇到EOF或换行符</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lim - <span class="number">1</span> &amp;&amp; (c = getchar()) != EOF &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span>; ++i)</span><br><span class="line">        s[i] = c;</span><br><span class="line">    <span class="comment">// 如果遇到换行符，将其读入字符串中</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        s[i++] = c;</span><br><span class="line">    <span class="comment">// 添加字符串终止符</span></span><br><span class="line">    s[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="comment">// 返回读取到的字符数</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="External-Variables-and-Scope"><a href="#External-Variables-and-Scope" class="headerlink" title="External Variables and Scope"></a>External Variables and Scope</h2><p>外部变量是在函数外部定义的变量，可以在整个程序中访问和修改。<br>在C语言中，外部变量的声明和定义必须在同一个作用域内，否则会报错。</p><ol><li>在函数内部定义的变量是局部变量，只能在函数内部访问和修改。</li><li>在函数外部定义的变量是外部变量，可以在整个程序中访问和修改。</li><li>在函数内部定义的变量和函数外部定义的变量可以重名，但作用域不同。<br>请看下面程序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出为：<br>a &#x3D; 10<br>a &#x3D; 20</p></blockquote></li></ol><p>关于外部链接(extern)<br>在C语言中，外部链接(extern)用于声明一个外部变量或函数，使得该变量或函数可以在多个文件中被引用。</p><ol><li>在一个文件中定义一个外部变量或函数，然后在另一个文件中声明该变量或函数，使得两个文件中的变量或函数可以互相访问。</li><li>在一个文件中定义一个外部变量或函数，然后在另一个文件中定义同名的变量或函数，使得两个文件中的变量或函数可以互相访问，但作用域不同。<br>请看下面程序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局变量 a</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数 func 修改全局变量 a 的值并打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In func: a = %d\n&quot;</span>, a);</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After modification in func: a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 打印初始值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial value of a: a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 func 函数</span></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印修改后的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final value of a: a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在实际开发中，还是尽量避免使用全局变量，因为全局变量容易造成命名冲突，难以维护和理解。</li></ol><hr><h2 id="第一章总结"><a href="#第一章总结" class="headerlink" title="第一章总结"></a>第一章总结</h2><p>第一章是一个整体的介绍，开门见山地讲了C是有什么语法，有什么数据结构，变量有什么定义方式，程序结构是什么，表达式和运算符怎么用等等，是比较基础的一些内容，但没有对语言的细节进行介绍比如函数参数的指针的用法,结构体等等。这一章主要目的是让读者快速了解 C 语言的基本框架和核心概念，为后续章节的学习打下基础。所以第一章并没有深入探讨一些更复杂的语言特性，例如：</p><p>函数参数的指针用法：如何通过指针传递参数，以及如何在函数中修改传入的变量。</p><ul><li>结构体：如何定义和使用结构体来组织复杂的数据。</li><li>指针操作：如何使用指针进行内存操作和动态分配。</li><li>高级控制结构：如 switch 语句、goto 语句等更复杂的控制流。</li><li>文件操作：如何读写文件，进行更复杂的 I&#x2F;O 操作。<br>这些更详细的语言特性和高级用法将在后续章节中逐步展开。第一章的主要目标是帮助读者快速入门，并为后续学习奠定基础。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 计算机软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四级听力方法(短片新闻)</title>
      <link href="/2024/09/04/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95-%E7%9F%AD%E7%89%87%E6%96%B0%E9%97%BB/"/>
      <url>/2024/09/04/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95-%E7%9F%AD%E7%89%87%E6%96%B0%E9%97%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前置：</p><blockquote><p>划关键词，猜发音<br>视听一致+同转<br>正向选不出来用错误选项特点<br>注意 says&#x2F;sad&#x2F;concern&#x2F;think</p></blockquote></blockquote><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基本上方法就是上一篇笔记<a href="/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/" title="英语四级听力笔记（核心方法）">英语四级听力笔记（核心方法）</a>的内容,一般是开头的前四道题。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>基本上视听一致+同转可以解决 1 题或 2 题这种偏简单的题目，遇到逻辑性较强的题目最好是做下笔记，用简写的关键词梳理逻辑。</p><h1 id="词汇整理"><a href="#词汇整理" class="headerlink" title="词汇整理"></a>词汇整理</h1><ol><li><p><strong>skeletons</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;ˈskelɪtənz&#x2F;</li><li><em>Chinese</em>: 骨架，骨骼</li></ul></li><li><p><strong>utility</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;juːˈtɪlɪti&#x2F;</li><li><em>Chinese</em>: 功用，实用</li></ul></li><li><p><strong>wrecked</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;rekt&#x2F;</li><li><em>Chinese</em>: 破坏的，毁坏的</li></ul></li><li><p><strong>limbs</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;lɪmz&#x2F;</li><li><em>Chinese</em>: 肢体，四肢</li></ul></li><li><p><strong>thundering</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈθʌndərɪŋ&#x2F;</li><li><em>Chinese</em>: 雷鸣般的，轰隆隆的</li></ul></li><li><p><strong>utilities</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;juːˈtɪlɪtiz&#x2F;</li><li><em>Chinese</em>: 公共事业，公用设施</li></ul></li><li><p><strong>pedestrians</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;pəˈdestriənz&#x2F;</li><li><em>Chinese</em>: 行人</li></ul></li><li><p><strong>underneath</strong></p><ul><li><em>Part of Speech</em>: Preposition</li><li><em>Pronunciation</em>: &#x2F;ˌʌndərˈniːθ&#x2F;</li><li><em>Chinese</em>: 在…下面</li></ul></li><li><p><strong>recession</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;rɪˈseʃn&#x2F;</li><li><em>Chinese</em>: 经济衰退，不景气</li></ul></li><li><p><strong>rush-hour</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;ˈrʌʃ ˌaʊər&#x2F;</li><li><em>Chinese</em>: 高峰时段</li></ul></li><li><p><strong>soaring</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈsɔːrɪŋ&#x2F;</li><li><em>Chinese</em>: 飞涨的，骤升的</li></ul></li><li><p><strong>worsening</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈwɜːrsənɪŋ&#x2F;</li><li><em>Chinese</em>: 恶化的</li></ul></li><li><p><strong>distracted</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;dɪˈstræktɪd&#x2F;</li><li><em>Chinese</em>: 分心的，注意力不集中的</li></ul></li><li><p><strong>boosted</strong></p><ul><li><em>Part of Speech</em>: Verb (Past Tense)</li><li><em>Pronunciation</em>: &#x2F;buːstɪd&#x2F;</li><li><em>Chinese</em>: 提高，促进</li></ul></li><li><p><strong>advocate</strong></p><ul><li><em>Part of Speech</em>: Verb&#x2F;Noun</li><li><em>Pronunciation</em>: &#x2F;ˈædvəˌkeɪt&#x2F; (verb) &#x2F;ˈædvəkət&#x2F; (noun)</li><li><em>Chinese</em>: 提倡，主张 (动词); 提倡者，拥护者 (名词)</li></ul></li><li><p><strong>unproven</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ʌnˈpruːvən&#x2F;</li><li><em>Chinese</em>: 未经证实的</li></ul></li><li><p><strong>overestimating</strong></p><ul><li><em>Part of Speech</em>: Verb (Present Participle)</li><li><em>Pronunciation</em>: &#x2F;ˌoʊvərˈestɪmeɪtɪŋ&#x2F;</li><li><em>Chinese</em>: 高估</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语应试 </tag>
            
            <tag> CET-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四级听力笔记（核心方法）</title>
      <link href="/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="视听一致原则"><a href="#视听一致原则" class="headerlink" title="视听一致原则"></a>视听一致原则</h1><ul><li>四级听力我所看到的和我所听到越一致，越容易得到正确答案。<ul><li>某一个选项的 <strong>关键信息</strong> 与音频内容完全相同</li><li>某一选项的 <strong>关键信息</strong> 出现次数最多</li></ul></li></ul><h1 id="关键词的选择"><a href="#关键词的选择" class="headerlink" title="关键词的选择"></a>关键词的选择</h1><ul><li><p>纵向审题：排除相同概念</p><blockquote><p>如果多个选项里面都出现了同一个词，排除<br>在听音频的时候一定要注意否定信息</p></blockquote></li><li><p>横向划词：划实不划虚 * ad.+n.&#x2F;n.+n.&#x2F;v.+n</p><blockquote><p>tips: 最好知道关键词的发音，或者自然拼读大概了解发音</p></blockquote></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>划选项关键词</li><li>听音频，扫视选项</li><li>发现对应的的信息，迅速标记</li><li>得出答案</li></ol><h1 id="“同转”概念"><a href="#“同转”概念" class="headerlink" title="“同转”概念"></a>“同转”概念</h1><ul><li>同根词：excited-excitement &#x2F; sad-sadness</li><li>词词替换：big-large-massive &#x2F; change-alter-shift-modify</li><li>短语&#x2F;概念替换：pull down-knock down</li><li>宽泛到具体：food-tomatoes</li></ul><h1 id="正确及错误选项的特点"><a href="#正确及错误选项的特点" class="headerlink" title="正确及错误选项的特点"></a>正确及错误选项的特点</h1><h2 id="正确选项"><a href="#正确选项" class="headerlink" title="正确选项"></a>正确选项</h2><ul><li>选项与音频内容一致(视听或同转一致)</li><li>选项符合问题描述(非必要)</li><li>往往逻辑引导答案<ul><li>因果：Because, since, as, for, from, thanks to …</li><li>转折：while, though, although, even, but, yet, however, or</li><li>强调：important, significant, in fact, actually, especially</li><li>举例：for example</li><li>疑问：出现疑问句 Q …? A Yes, …</li><li>感情色彩<ul><li>赞同：right, yes, of course, I agree, thanks</li><li>否定：no, I’m afraid, I’ll check</li><li>强调个人观点：oh! , I think, I suppose, in my opinion</li><li>迟疑犹豫：um, well, maybe, probably</li></ul></li></ul></li></ul><h2 id="错误选项"><a href="#错误选项" class="headerlink" title="错误选项"></a>错误选项</h2><ul><li>直接被否定</li><li>反义描述</li><li>部分信息未提及</li><li>选项杂糅<blockquote><p>一般情况下选项有否定信息考虑排除，除非问题出现否定</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语应试 </tag>
            
            <tag> CET-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/02/Hello-World/"/>
      <url>/2024/09/02/Hello-World/</url>
      
        <content type="html"><![CDATA[<h1 id="梦开始的地方"><a href="#梦开始的地方" class="headerlink" title="梦开始的地方"></a>梦开始的地方</h1><p><strong>“HELLO, WORLD!”</strong> 最初起源于 1972 年，成为了程序设计的一种经典传统。这个原始的示例最早出现在由 Brian Kernighan 和 Dennis Ritchie 所著的书《C Programming Language》中。自那时起，几乎每一个编程教材或编程语言的介绍都会将其作为第一个教程，以向读者展示基础的程序输出功能。</p><h2 id="第一个C程序"><a href="#第一个C程序" class="headerlink" title="第一个C程序"></a>第一个C程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 硬件 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
