<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言知识笔记1</title>
      <link href="/2024/09/10/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B01/"/>
      <url>/2024/09/10/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文章基于《C Programming Language (2nd Edition)》,主要是本人对 C 语言的具体认识以及对 C 程序语言的阅读感想。</p></blockquote><h1 id="A-Tutorial-Introduction"><a href="#A-Tutorial-Introduction" class="headerlink" title="A Tutorial Introduction"></a>A Tutorial Introduction</h1><blockquote><p>We have to concentrate on the basics: variables and constants, arithmetic, control flow, functions, and the rudiments of input and output.</p></blockquote><blockquote><p>The C programming language include pointers, structures, most of C’s rich set of operators, several control−flow statements, and the standard library.</p></blockquote><p>简单粗暴的来说 C 语言的基础包含变量与常量，控制流，函数以及一些入门的输入输出。语言性质还包含了指针，结构体，算子集，以及标准库。</p><p><strong>C 语言是一个面向过程的编程语言！</strong></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><blockquote><p>In C, the program to print <em>hello,world</em> is</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    main()</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>you should create the program in a file whose name ends in <code>.c</code> such as <code>hello.c</code> compile it with the command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc hello.c</span><br></pre></td></tr></table></figure><p>当你照做后，你会发现在 GCC 编译器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello.c:4:1: error: <span class="built_in">return</span> <span class="built_in">type</span> defaults to ‘int’ [-Wimplicit-int]</span><br><span class="line">    4 | main()</span><br><span class="line">      | ^~~~</span><br></pre></td></tr></table></figure><blockquote><p>为什么会报错呢？因为在旧的 C 编译器中是允许这样的写法，但是随着 C 语言语法的规范化逐渐不再使用这种写法，为了代码的可移植性和清晰性，推荐写成<code>int main()</code> 或者<code>int main(int argc, char *argv[])</code></p></blockquote><blockquote><p>Our example is a function named main. Normally you are at liberty togive functions whatever names you like, but <code>main</code> is special − your program begins executing at thebeginning of main. This means that every program must have a main somewhere</p></blockquote><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个是 C 的头文件，我们接下来一点一点讲解这行代码。<br><code>#include</code>叫做文件包含命令，用来引入对应的头文件（.h 文件）。#include 也是 C 语言预处理命令的一种。</p><p>有两种常用的 #include 方式：</p><ol><li>尖括号方式 <code>&lt; &gt;</code>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>双引号方式<code>“ ”</code>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myheader.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>使用双引号时，编译器首先会在<strong>当前源文件所在的目录</strong>查找头文件。如果没有找到，再去标准系统目录中查找。常用于引入<strong>用户自定义</strong>的头文件。<br>使用尖括号时，编译器会在<strong>标准系统目录</strong>（如编译器自带的头文件路径）中查找头文件。常用于引入<strong>标准库</strong>或<strong>第三方库</strong>的头文件。</p><p>C 语言一切都是从 main 开始的，main 是主函数，是程序开始的接口，任何函数都是从这里开始的。</p><blockquote><p>The statements of a function are enclosed in braces { }. The function main contains only one statement</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>函数<code>printf()</code>是一个库函数负责打印输出，在双引号中是要输出的字符串。<code>\n</code>是转义字符，在这里是为了自动换行。</p><blockquote><p>Notice that \n represents only a single character. An escape sequence like \n provides a general andextensible mechanism for representing hard−to−type or invisible characters. Among the others that C providesare \t for tab, \b for backspace, &quot; for the double quote and \ for the backslash itself</p></blockquote><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\t</code></td><td>制表符（水平制表）</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr><tr><td><code>\b</code></td><td>退格符</td></tr><tr><td><code>\\</code></td><td>反斜杠符</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\0</code></td><td>空字符（NUL）</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\f</code></td><td>换页符</td></tr><tr><td><code>\?</code></td><td>问号符（防止与三元运算符冲突）</td></tr><tr><td><code>\xhh</code></td><td>以十六进制表示的字符</td></tr><tr><td><code>\ooo</code></td><td>以八进制表示的字符</td></tr></tbody></table><hr><h2 id="Variables-and-Arithmetic-Expressions"><a href="#Variables-and-Arithmetic-Expressions" class="headerlink" title="Variables and Arithmetic Expressions"></a>Variables and Arithmetic Expressions</h2><blockquote><p>Any characters between &#x2F;_ and _&#x2F;are ignored by the compile<br>Comments may appear anywhere where a blank, tab or newline can.<br>这里提到了多行注释,用<code>/* */</code>包括注释块，编译器会无视它。</p></blockquote><blockquote><p>In C, all variables must be declared before they are used, usually at the beginning of the function before anyexecutable statements. A declaration announces the properties of variables; it consists of a name and a list of variables, such as</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> fahr, celsius;</span><br><span class="line"><span class="type">int</span> lower, upper, step;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用 C 语言的变量之前，必须先声明，一般在要使用的函数或可执行语句之前，C 读取程序是按照顺序一行一行读取的，所以变量一定要提前声明好。</p><p>常用的变量类型如下表所示：</p><table><thead><tr><th>类型关键字</th><th>描述</th></tr></thead><tbody><tr><td><code>char</code></td><td>存储单个字符，占用 1 字节</td></tr><tr><td><code>int</code></td><td>存储整数，通常占用 4 字节（具体大小取决于编译器和系统）</td></tr><tr><td><code>float</code></td><td>存储单精度浮点数，遵循 IEEE 754 标准</td></tr><tr><td><code>double</code></td><td>存储双精度浮点数，比 float 有更高的精度和更大的范围</td></tr><tr><td><code>unsigned</code></td><td>无符号类型，可以存储正数和零，通常比有符号类型有更大的范围</td></tr><tr><td><code>short</code></td><td>短整型，通常占用 2 字节</td></tr><tr><td><code>long</code></td><td>长整型，通常占用 8 字节（在某些系统上可能是 4 字节）</td></tr><tr><td><code>long long</code></td><td>长长整型，至少占用 64 位</td></tr><tr><td><code>void</code></td><td>表示没有类型，用于函数没有返回值或指向无类型数据的指针</td></tr><tr><td><code>_Bool</code></td><td>布尔类型，存储值为 0 或 1，定义在 C99 标准中</td></tr><tr><td><code>_Complex</code></td><td>复数类型，用于存储复数，定义在 C99 标准中</td></tr></tbody></table><hr><blockquote><p>Each line of the table is computed the same way, so we use a loop that repeats once per output line; this is thepurpose of the while loop</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">    i = <span class="number">2</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果每行都运行相同的程序，会显得很麻烦，可以使用 while 循环，在循环结构中，我们习惯性的按<code>Tab</code>键缩进，虽然 C 不会在意程序的外观，但为了程序的可读性，这是需要的。我们用<code>&#123;&#125;</code>包含循环内的程序，如果这里不用<code>&#123;&#125;</code>，那么 C 就只会默认执行 while 内的第一行程序。</p><hr><blockquote><p>printf is a general−purpose output formatting function.Its first argument is a string of characters to be printed, with each % indicating where one of the other (second, third, …) arguments is to be substituted, and in what form it is to be printed.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t%d\n&quot;</span>, fahr, celsius);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于<code>printf()</code>里面的<code>%d</code>,以及类似的占位符请看下表</p><table><thead><tr><th>占位符</th><th>描述</th></tr></thead><tbody><tr><td><code>%d</code></td><td>打印十进制整数（有符号）</td></tr><tr><td><code>%i</code></td><td>与 <code>%d</code> 相同</td></tr><tr><td><code>%u</code></td><td>打印十进制整数（无符号）</td></tr><tr><td><code>%o</code></td><td>打印八进制整数</td></tr><tr><td><code>%x</code></td><td>打印十六进制整数（小写字母）</td></tr><tr><td><code>%X</code></td><td>打印十六进制整数（大写字母）</td></tr><tr><td><code>%c</code></td><td>打印单个字符</td></tr><tr><td><code>%s</code></td><td>打印字符串</td></tr><tr><td><code>%f</code></td><td>打印浮点数（默认精度为 6 位小数）</td></tr><tr><td><code>%lf</code></td><td>打印双精度浮点数</td></tr><tr><td><code>%e</code></td><td>打印科学计数法表示的浮点数</td></tr><tr><td><code>%g</code></td><td>打印一般浮点数（根据数值的大小自动选择 <code>%f</code> 或 <code>%e</code>）</td></tr><tr><td><code>%p</code></td><td>打印指针（地址）</td></tr><tr><td><code>%%</code></td><td>打印百分号字符 <code>%</code></td></tr><tr><td><code>%n</code></td><td>打印到目前为止输出的字符数（用于计数）</td></tr></tbody></table><blockquote><p>By the way, printf is not part of the C language; there is no input or output defined in C itself. printf is just a useful function from the standard library of functions that are normally accessible to C programs. The behaviour of printf is defined in the ANSI standard, however, so its properties should be the same with anycompiler and library that conforms to the standard.</p></blockquote><p>这段话大致讲述了<code>printf()</code>和 C 的关系，C 并非包含<code>printf()</code>,而是 C 的标准库函数，所以需要引入标准库<code>stdio.h</code>(standard input output)。</p><p>关于浮点数，以下占位符请见下表：</p><table><thead><tr><th>占位符</th><th>描述</th><th>示例</th><th>输出</th></tr></thead><tbody><tr><td><code>%f</code></td><td>打印浮点数，默认精度为 6 位小数</td><td><code>printf(&quot;%.2f\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%e</code></td><td>打印科学计数法表示的浮点数</td><td><code>printf(&quot;%.2e\n&quot;, 123.456789);</code></td><td>1.23e+02</td></tr><tr><td><code>%g</code></td><td>打印一般浮点数，自动选择 <code>%f</code> 或 <code>%e</code></td><td><code>printf(&quot;%.2g\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%lf</code></td><td>打印双精度浮点数（与 <code>%f</code> 相同）</td><td><code>printf(&quot;%.2lf\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%.2f</code></td><td>打印浮点数并保留两位小数</td><td><code>printf(&quot;%.2f\n&quot;, 123.456789);</code></td><td>123.46</td></tr><tr><td><code>%.3f</code></td><td>打印浮点数并保留三位小数</td><td><code>printf(&quot;%.3f\n&quot;, 123.456789);</code></td><td>123.457</td></tr><tr><td><code>%.1f</code></td><td>打印浮点数并保留一位小数</td><td><code>printf(&quot;%.1f\n&quot;, 123.456789);</code></td><td>123.5</td></tr></tbody></table><h2 id="The-for-statement"><a href="#The-for-statement" class="headerlink" title="The for statement"></a>The for statement</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   <span class="comment">/* print Fahrenheit−Celsius table */</span></span></span><br><span class="line">    main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fahr;</span><br><span class="line">    <span class="keyword">for</span> (fahr = <span class="number">0</span>; fahr &lt;= <span class="number">300</span>; fahr = fahr + <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d %6.1f\n&quot;</span>, fahr, (<span class="number">5.0</span>/<span class="number">9.0</span>)*(fahr−<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The for statement is a loop, a generalization of the while. If you compare it to the earlier while, it soperation should be clear.<br>for 语句有三个部分：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>第一个部分在循环开始前执行，将<code>0</code>赋值给<code>fahr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr &lt;= <span class="number">300</span></span><br></pre></td></tr></table></figure><p>第二个部分，是循环的条件，条件满足时，循环工作，当<code>fahr</code>达到<code>300</code>时，代表循环结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fahr = fahr + <span class="number">20</span></span><br></pre></td></tr></table></figure><p>第三个部分相当于一个步长，每次循环 fahr 都会加 20<br>这三个部分都会控制循环的次数</p><h2 id="Symbolic-Constants"><a href="#Symbolic-Constants" class="headerlink" title="Symbolic Constants"></a>Symbolic Constants</h2><blockquote><p>A #define line defines a symbolic name or symbolic constant to be aparticular string of characters</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOWER 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UPPER 200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEP 20</span></span><br></pre></td></tr></table></figure><p><code>LOWER</code> <code>UPPER</code> <code>STEP</code> 这些都是符号常量，注意，不是变量，而且这些值相当于是预处理命令，用<code>#define</code>来设置。</p><h2 id="Character-Input-and-Output"><a href="#Character-Input-and-Output" class="headerlink" title="Character Input and Output"></a>Character Input and Output</h2><blockquote><p>The standard library provides several functions for reading or writing one character at a time, of which <code>getchar</code> and <code>putchar</code> are the simplest. Each time it is called, getchar reads the next input character from a text stream and returns that as its value.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = getchar();</span><br></pre></td></tr></table></figure><p><code>getchar()</code>用于从键盘中检测输入的字符，注意不是字符串<br><code>putchar()</code>用于输出字符，虽然有的地方会写用<code>puts()</code>函数</p><h3 id="File-Copying"><a href="#File-Copying" class="headerlink" title="File Copying"></a>File Copying</h3><p>这里有一个复制一个字符的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c != EOF) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>!=</code>的意思是“不等于”</p></blockquote><p><code>EOF</code>是一个表示文件结束（End of File）的常量。它用于标识当程序从输入流中读取到文件或数据流的末尾时的状态。EOF 通常被定义为 -1，并且是在 stdio.h 头文件中定义的宏。</p><p>这个程序的意思是读取一个字符存入<code>c</code>,检查<code>c</code>是否为<code>EOF</code>,不是的话将<code>c</code>输出，继续读取字符，直到<code>EOF</code>条件达成，循环停止</p><h3 id="File-Counting"><a href="#File-Counting" class="headerlink" title="File Counting"></a>File Counting</h3><p>接下来看一下这个计数的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="comment">//count characters in input; 1st version</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> nc;</span><br><span class="line">    <span class="keyword">while</span> (getchar != EOF)</span><br><span class="line">        ++nc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The statement<code>++nc</code>persents a new operator <code>++</code>, whitch means <em>increment by one</em>.</p></blockquote><p>这样的操作可以避免写 <code>nc = nc+1</code>，这种写法不仅简单，还更有效率。<br>在这个程序中涉及到了 <code>long</code> 这种变量，而不是<code>int</code>,这里的<code>long</code>是一个长整型变量，它的存储比整型更高位的数字，需要使用<code>%ld</code>告诉<code>printf()</code>这个变量是长整型</p><p>可以把这个程序改成 for 循环类型,以及双精度浮点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="comment">//count characters in input; 2nd version</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> nc;</span><br><span class="line">    <span class="keyword">for</span> (nc =<span class="number">0</span>; getchar() != EOF;++nc)</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0f\n&quot;</span>, nc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The body of this for loop is empty, because all the work is done in the test and increment parts. But thegrammatical rules of C require that a for statement have a body. The isolated semicolon, called a nullstatement, is there to satisfy that requirement. We put it on a separate line to make it visible.</p></blockquote><h3 id="Line-Counting"><a href="#Line-Counting" class="headerlink" title="Line Counting"></a>Line Counting</h3><p>这是一个记录行数的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="type">int</span> c, nl;</span><br><span class="line"></span><br><span class="line">    nl = <span class="number">0</span>; <span class="comment">// 行计数器初始化为0</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != EOF) &#123; <span class="comment">// 读取输入字符，直到遇到EOF</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 检查是否是换行符</span></span><br><span class="line">            ++nl; <span class="comment">// 如果是换行符，行计数器加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nl); <span class="comment">// 输出行数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C语言是支持嵌套的，程序中<code>while()</code>里面嵌套了<code>if</code>。<br><code>==</code>这里是等号，为了和<code>=</code>（赋值）作区分</p><h3 id="Word-Counting"><a href="#Word-Counting" class="headerlink" title="Word Counting"></a>Word Counting</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IN  1  <span class="comment">// 表示在一个单词内部</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT 0  <span class="comment">// 表示在一个单词外部</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> c, nl, nw, nc, state;</span><br><span class="line"></span><br><span class="line">    state = OUT;</span><br><span class="line">    nl = nw = nc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != EOF) &#123;</span><br><span class="line">        ++nc;  <span class="comment">// 统计字符数量</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            ++nl;  <span class="comment">// 统计行数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            state = OUT;  <span class="comment">// 当前字符是空白符，表示不在单词内</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == OUT) &#123;</span><br><span class="line">            state = IN;  <span class="comment">// 如果之前不在单词内，遇到非空白字符，进入单词</span></span><br><span class="line">            ++nw;  <span class="comment">// 统计单词数量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, nl, nw, nc);  <span class="comment">// 输出行数、单词数和字符数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>state = OUT;</code>：初始状态为OUT，即程序开始时不在单词内。<br><code>nl = nw = nc = 0;</code>：行数、单词数和字符数均初始化为 0。</p><p><code>#define IN 1</code>和 <code>#define OUT 0</code>：定义两个符号常量，IN 表示程序处于一个单词的内部，OUT 表示程序处于一个单词的外部。这种定义方式也被成为宏定义。</p><p><code>if (c == &#39; &#39; || c == &#39;\n&#39; || c == &#39;\t&#39;) state = OUT;</code>：如果读取到空格、换行符或制表符，则表示不在单词内部，state 设置为 OUT。<code>||</code>代表着或逻辑，所有参数中只要有一个参数为<code>True</code>,所有的参数都返回<code>True</code>。</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><blockquote><p>Let is write a program to count the number of occurrences of each digit, of white space characters (blank, tab,newline), and of all other characters. This is artificial, but it permits us to illustrate several aspects of C in one program:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, i, nWhite, nother;</span><br><span class="line">    <span class="type">int</span> ndigit[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    nWhite = nother=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        ndigit[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (c = getchar() != EOF)</span><br><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;c &lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            ++ndigit[c-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            ++nWhite;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ++nother;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;digits = &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ndigit[i]);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="string">&quot;, white space = %d, other = %d\n&quot;</span>,nwhite,nother));        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 计算机软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四级听力方法(短片新闻)</title>
      <link href="/2024/09/04/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95-%E7%9F%AD%E7%89%87%E6%96%B0%E9%97%BB/"/>
      <url>/2024/09/04/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95-%E7%9F%AD%E7%89%87%E6%96%B0%E9%97%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前置：</p><blockquote><p>划关键词，猜发音<br>视听一致+同转<br>正向选不出来用错误选项特点<br>注意 says&#x2F;sad&#x2F;concern&#x2F;think</p></blockquote></blockquote><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基本上方法就是上一篇笔记<a href="/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/" title="英语四级听力笔记（核心方法）">英语四级听力笔记（核心方法）</a>的内容,一般是开头的前四道题。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>基本上视听一致+同转可以解决 1 题或 2 题这种偏简单的题目，遇到逻辑性较强的题目最好是做下笔记，用简写的关键词梳理逻辑。</p><h1 id="词汇整理"><a href="#词汇整理" class="headerlink" title="词汇整理"></a>词汇整理</h1><ol><li><p><strong>skeletons</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;ˈskelɪtənz&#x2F;</li><li><em>Chinese</em>: 骨架，骨骼</li></ul></li><li><p><strong>utility</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;juːˈtɪlɪti&#x2F;</li><li><em>Chinese</em>: 功用，实用</li></ul></li><li><p><strong>wrecked</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;rekt&#x2F;</li><li><em>Chinese</em>: 破坏的，毁坏的</li></ul></li><li><p><strong>limbs</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;lɪmz&#x2F;</li><li><em>Chinese</em>: 肢体，四肢</li></ul></li><li><p><strong>thundering</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈθʌndərɪŋ&#x2F;</li><li><em>Chinese</em>: 雷鸣般的，轰隆隆的</li></ul></li><li><p><strong>utilities</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;juːˈtɪlɪtiz&#x2F;</li><li><em>Chinese</em>: 公共事业，公用设施</li></ul></li><li><p><strong>pedestrians</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;pəˈdestriənz&#x2F;</li><li><em>Chinese</em>: 行人</li></ul></li><li><p><strong>underneath</strong></p><ul><li><em>Part of Speech</em>: Preposition</li><li><em>Pronunciation</em>: &#x2F;ˌʌndərˈniːθ&#x2F;</li><li><em>Chinese</em>: 在…下面</li></ul></li><li><p><strong>recession</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;rɪˈseʃn&#x2F;</li><li><em>Chinese</em>: 经济衰退，不景气</li></ul></li><li><p><strong>rush-hour</strong></p><ul><li><em>Part of Speech</em>: Noun</li><li><em>Pronunciation</em>: &#x2F;ˈrʌʃ ˌaʊər&#x2F;</li><li><em>Chinese</em>: 高峰时段</li></ul></li><li><p><strong>soaring</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈsɔːrɪŋ&#x2F;</li><li><em>Chinese</em>: 飞涨的，骤升的</li></ul></li><li><p><strong>worsening</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ˈwɜːrsənɪŋ&#x2F;</li><li><em>Chinese</em>: 恶化的</li></ul></li><li><p><strong>distracted</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;dɪˈstræktɪd&#x2F;</li><li><em>Chinese</em>: 分心的，注意力不集中的</li></ul></li><li><p><strong>boosted</strong></p><ul><li><em>Part of Speech</em>: Verb (Past Tense)</li><li><em>Pronunciation</em>: &#x2F;buːstɪd&#x2F;</li><li><em>Chinese</em>: 提高，促进</li></ul></li><li><p><strong>advocate</strong></p><ul><li><em>Part of Speech</em>: Verb&#x2F;Noun</li><li><em>Pronunciation</em>: &#x2F;ˈædvəˌkeɪt&#x2F; (verb) &#x2F;ˈædvəkət&#x2F; (noun)</li><li><em>Chinese</em>: 提倡，主张 (动词); 提倡者，拥护者 (名词)</li></ul></li><li><p><strong>unproven</strong></p><ul><li><em>Part of Speech</em>: Adjective</li><li><em>Pronunciation</em>: &#x2F;ʌnˈpruːvən&#x2F;</li><li><em>Chinese</em>: 未经证实的</li></ul></li><li><p><strong>overestimating</strong></p><ul><li><em>Part of Speech</em>: Verb (Present Participle)</li><li><em>Pronunciation</em>: &#x2F;ˌoʊvərˈestɪmeɪtɪŋ&#x2F;</li><li><em>Chinese</em>: 高估</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语应试 </tag>
            
            <tag> CET-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四级听力笔记（核心方法）</title>
      <link href="/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/03/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%90%AC%E5%8A%9B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="视听一致原则"><a href="#视听一致原则" class="headerlink" title="视听一致原则"></a>视听一致原则</h1><ul><li>四级听力我所看到的和我所听到越一致，越容易得到正确答案。<ul><li>某一个选项的 <strong>关键信息</strong> 与音频内容完全相同</li><li>某一选项的 <strong>关键信息</strong> 出现次数最多</li></ul></li></ul><h1 id="关键词的选择"><a href="#关键词的选择" class="headerlink" title="关键词的选择"></a>关键词的选择</h1><ul><li><p>纵向审题：排除相同概念</p><blockquote><p>如果多个选项里面都出现了同一个词，排除<br>在听音频的时候一定要注意否定信息</p></blockquote></li><li><p>横向划词：划实不划虚 * ad.+n.&#x2F;n.+n.&#x2F;v.+n</p><blockquote><p>tips: 最好知道关键词的发音，或者自然拼读大概了解发音</p></blockquote></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>划选项关键词</li><li>听音频，扫视选项</li><li>发现对应的的信息，迅速标记</li><li>得出答案</li></ol><h1 id="“同转”概念"><a href="#“同转”概念" class="headerlink" title="“同转”概念"></a>“同转”概念</h1><ul><li>同根词：excited-excitement &#x2F; sad-sadness</li><li>词词替换：big-large-massive &#x2F; change-alter-shift-modify</li><li>短语&#x2F;概念替换：pull down-knock down</li><li>宽泛到具体：food-tomatoes</li></ul><h1 id="正确及错误选项的特点"><a href="#正确及错误选项的特点" class="headerlink" title="正确及错误选项的特点"></a>正确及错误选项的特点</h1><h2 id="正确选项"><a href="#正确选项" class="headerlink" title="正确选项"></a>正确选项</h2><ul><li>选项与音频内容一致(视听或同转一致)</li><li>选项符合问题描述(非必要)</li><li>往往逻辑引导答案<ul><li>因果：Because, since, as, for, from, thanks to …</li><li>转折：while, though, although, even, but, yet, however, or</li><li>强调：important, significant, in fact, actually, especially</li><li>举例：for example</li><li>疑问：出现疑问句 Q …? A Yes, …</li><li>感情色彩<ul><li>赞同：right, yes, of course, I agree, thanks</li><li>否定：no, I’m afraid, I’ll check</li><li>强调个人观点：oh! , I think, I suppose, in my opinion</li><li>迟疑犹豫：um, well, maybe, probably</li></ul></li></ul></li></ul><h2 id="错误选项"><a href="#错误选项" class="headerlink" title="错误选项"></a>错误选项</h2><ul><li>直接被否定</li><li>反义描述</li><li>部分信息未提及</li><li>选项杂糅<blockquote><p>一般情况下选项有否定信息考虑排除，除非问题出现否定</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语应试 </tag>
            
            <tag> CET-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/02/Hello-World/"/>
      <url>/2024/09/02/Hello-World/</url>
      
        <content type="html"><![CDATA[<h1 id="梦开始的地方"><a href="#梦开始的地方" class="headerlink" title="梦开始的地方"></a>梦开始的地方</h1><p><strong>“HELLO, WORLD!”</strong> 最初起源于 1972 年，成为了程序设计的一种经典传统。这个原始的示例最早出现在由 Brian Kernighan 和 Dennis Ritchie 所著的书《C Programming Language》中。自那时起，几乎每一个编程教材或编程语言的介绍都会将其作为第一个教程，以向读者展示基础的程序输出功能。</p><h2 id="第一个C程序"><a href="#第一个C程序" class="headerlink" title="第一个C程序"></a>第一个C程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 硬件 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
